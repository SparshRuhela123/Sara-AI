import sys
import os
import pvporcupine
from pvrecorder import PvRecorder
import pyttsx3
import speech_recognition as sr
import struct
import AppOpener
import webbrowser
from datetime import datetime
import json
import requests
# PyQt5 imports
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QWidget
from PyQt5.QtGui import QFont
from PyQt5.QtCore import QThread, pyqtSignal, Qt

# --- Voice Engine Setup ---
engine = pyttsx3.init('sapi5')
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[0].id)

def speak(audio):
    """
    Function to make the assistant speak.
    """
    engine.say(audio)
    engine.runAndWait()

# --- Memory Functions ---
MEMORY_FILE = 'jarvis_memory.json'

def get_memory(key):
    """Retrieves a value from memory."""
    if not os.path.exists(MEMORY_FILE):
        return None
    with open(MEMORY_FILE, 'r') as f:
        memory = json.load(f)
    return memory.get(key, None)

def set_memory(key, value):
    """Stores a key-value pair in memory."""
    memory = {}
    if os.path.exists(MEMORY_FILE):
        with open(MEMORY_FILE, 'r') as f:
            memory = json.load(f)
    memory[key] = value
    with open(MEMORY_FILE, 'w') as f:
        json.dump(memory, f, indent=4)
    return True

# --- LLM Integration (Placeholder) ---
def get_llm_response(query):
    """
    Function to send a query to an LLM and get a response.
    NOTE: You need to replace this with your actual LLM API call.
    """
    # Placeholder for a real LLM API call
    return "I am a simple AI assistant. I am not configured to use a language model yet."

# --- External API Functions (Placeholder) ---
def get_weather_data(city):
    """
    Function to get weather data for a city.
    NOTE: You need to get an API key from a service like OpenWeatherMap.
    """
    API_KEY = "YOUR_WEATHER_API_KEY"
    base_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric"
    try:
        response = requests.get(base_url)
        if response.status_code == 200:
            data = response.json()
            main = data['main']
            weather_desc = data['weather'][0]['description']
            temperature = main['temp']
            return f"The temperature in {city} is {temperature}Â°C with {weather_desc}."
        else:
            return f"Sorry, I couldn't get the weather data for {city}."
    except requests.exceptions.RequestException:
        return "Sorry, I am unable to connect to the weather service."

def get_news_headlines():
    """
    Function to fetch top news headlines.
    NOTE: You need to get an API key from NewsAPI.org.
    """
    API_KEY = "YOUR_NEWS_API_KEY"
    url = f"https://newsapi.org/v2/top-headlines?country=in&apiKey={API_KEY}"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            articles = data.get('articles', [])
            if not articles:
                return "Sorry, I couldn't find any news headlines."
            headlines = [article['title'] for article in articles[:5]]
            return "Here are the top 5 news headlines: " + ", ".join(headlines)
        else:
            return "Sorry, I am unable to connect to the news service."
    except requests.exceptions.RequestException:
        return "Sorry, I am unable to connect to the news service."

# --- Voice Assistant Worker Thread ---
class JarvisWorker(QThread):
    finished = pyqtSignal()
    status_update = pyqtSignal(str)

    def takeCommand(self):
        """
        Function to listen for voice commands in English or Hindi.
        """
        r = sr.Recognizer()
        query = "None"
        try:
            with sr.Microphone() as source:
                self.status_update.emit("Listening for command...")
                r.adjust_for_ambient_noise(source, duration=0.5)
                audio = r.listen(source, timeout=5, phrase_time_limit=5)
            self.status_update.emit("Recognizing in English...")
            query = r.recognize_google(audio, language='en-in')
            self.status_update.emit(f"You said (English): {query}\n")
        except sr.UnknownValueError:
            try:
                self.status_update.emit("Recognizing in Hindi...")
                query = r.recognize_google(audio, language='hi-IN')
                self.status_update.emit(f"You said (Hindi): {query}\n")
            except sr.UnknownValueError:
                self.status_update.emit("I could not understand that. Please say it again.")
                query = "None"
            except sr.RequestError as e:
                self.status_update.emit(f"Could not request results from Google Speech Recognition service; {e}")
                query = "None"
            except Exception as e:
                self.status_update.emit(f"An error occurred: {e}")
                query = "None"
        except sr.RequestError as e:
            self.status_update.emit(f"Could not request results from Google Speech Recognition service; {e}")
            query = "None"
        except Exception as e:
            self.status_update.emit(f"An error occurred: {e}")
            query = "None"
        return query

    def run(self):
        try:
            access_key = '5PTP1KQG/OaF6825ZLwWR/0pTiHYRnMkSTDAlPLIrjH+jKSxOx4qpw=='
            porcupine = pvporcupine.create(access_key=access_key, keywords=['jarvis'])
            recorder = PvRecorder(frame_length=porcupine.frame_length, device_index=-1)
            speak("Assistant is now ready. Waiting for the wake word 'jarvis'.")
            recorder.start()
            self.status_update.emit("Waiting for wake word: 'jarvis'")
            while True:
                pcm = recorder.read()
                keyword_index = porcupine.process(pcm)
                if keyword_index >= 0:
                    self.status_update.emit("Wake word detected!")
                    speak("Yes sir?")
                    query = self.takeCommand().lower()

                    # --- Command-processing logic for English and Hindi ---
                    if "remember that" in query:
                        parts = query.split("is")
                        if len(parts) == 2:
                            key = parts[0].replace("remember that", "").strip()
                            value = parts[1].strip()
                            set_memory(key, value)
                            speak(f"Okay, I've remembered that {key} is {value}.")
                        else:
                            speak("I'm sorry, I couldn't understand what to remember.")
                    elif "what is" in query:
                        key = query.replace("what is", "").strip()
                        value = get_memory(key)
                        if value:
                            speak(f"{key} is {value}.")
                        else:
                            speak(f"I don't have a memory for {key}.")
                    elif "add to my list" in query:
                        task = query.replace("add to my list", "").strip()
                        if task:
                            todo_list = get_memory('todo_list')
                            if todo_list is None: todo_list = []
                            todo_list.append(task)
                            set_memory('todo_list', todo_list)
                            speak(f"Okay, I've added {task} to your to-do list.")
                        else:
                            speak("I'm sorry, I couldn't understand the task.")
                    elif "read my list" in query or "what's on my list" in query:
                        todo_list = get_memory('todo_list')
                        if todo_list:
                            tasks = ", ".join(todo_list)
                            speak(f"You have the following items on your list: {tasks}")
                        else:
                            speak("Your to-do list is empty.")
                    elif "weather in" in query or "ka mausam" in query:
                        city = query.replace("weather in", "").replace("ka mausam", "").strip()
                        weather_info = get_weather_data(city)
                        speak(weather_info)
                    elif "read the news" in query or "tell me the news" in query or "samachar padho" in query:
                        news = get_news_headlines()
                        speak(news)
                    elif "go to youtube" in query or "open youtube" in query or "youtube kholo" in query:
                        speak("Opening YouTube.")
                        webbrowser.open("https://www.youtube.com")
                    elif "go to google" in query or "open google" in query or "google kholo" in query:
                        speak("Opening Google.")
                        webbrowser.open("https://www.google.com")
                    elif "go to" in query or "chalo" in query:
                        site_name = query.replace("go to", "").replace("chalo", "").strip()
                        speak(f"Opening {site_name}")
                        if site_name:
                            webbrowser.open(f"http://www.{site_name}.com")
                        else:
                            speak("Please specify a website to open.")
                    elif "open" in query or "kholo" in query:
                        app_name = query.replace("open", "").replace("kholo", "").strip()
                        try:
                            AppOpener.open(app_name, throw_error=True)
                            speak(f"Opening {app_name}")
                        except Exception as e:
                            speak(f"Sorry, I couldn't open {app_name}. Please make sure it's installed correctly.")
                    elif query != "none":
                        speak("I'm not sure how to respond to that, but I will try to find an answer.")
                        response = get_llm_response(query)
                        speak(response)
                    elif "hello" in query:
                        speak("Hello to you too!")
                    elif "how are you" in query:
                        speak("I'm doing well, thank you for asking!")
                    elif "what is the time" in query:
                        now = datetime.now()
                        current_time = now.strftime("%H:%M")
                        speak(f"The current time is {current_time}")
                    elif "stop" in query or "exit" in query:
                        speak("Goodbye!")
                        break
                    else:
                        speak("I'm sorry, I don't understand that command yet.")
                    self.status_update.emit("Waiting for wake word: 'jarvis'")
        except pvporcupine.PorcupineInvalidArgumentError as e:
            self.status_update.emit("Error: Invalid AccessKey or keyword. Please check your Picovoice AccessKey and try again.")
        finally:
            if 'porcupine' in locals():
                porcupine.delete()
            if 'recorder' in locals():
                recorder.delete()
            self.status_update.emit("Assistant stopped.")
            self.finished.emit()

# --- Main GUI Window ---
class JarvisGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("JARVIS Assistant")
        self.setGeometry(100, 100, 800, 600)

        # Set background image to cover entire window (stretch to fill)
        self.setStyleSheet("""
            QMainWindow {
                background-image: url("jarvis.WEPB");
                background-repeat: no-repeat;
                background-position: center;
                background-attachment: fixed;
                background-size: cover;
            }
        """)

        central_widget = QWidget(self)
        self.setCentralWidget(central_widget)

        self.status_label = QLabel("Waiting for wake word: 'jarvis'", self)
        # Position near the top center with full width
        self.status_label.setGeometry(0, 10, self.width(), 40)
        self.status_label.setStyleSheet("color: white; background-color: rgba(0,0,0,0);")
        self.status_label.setFont(QFont("Arial", 16))
        self.status_label.setAlignment(Qt.AlignHCenter | Qt.AlignTop)

        self.worker = JarvisWorker()
        self.worker.status_update.connect(self.update_status_label)
        self.worker.start()

    def update_status_label(self, message):
        self.status_label.setText(message)
        if "Listening" in message:
            self.status_label.setStyleSheet("color: yellow; background-color: rgba(0,0,0,0);")
        elif "You said" in message or "Recognizing" in message:
            self.status_label.setStyleSheet("color: cyan; background-color: rgba(0,0,0,0);")
        elif "Wake word detected" in message:
            self.status_label.setStyleSheet("color: lime; background-color: rgba(0,0,0,0);")
        elif "Waiting" in message:
            self.status_label.setStyleSheet("color: white; background-color: rgba(0,0,0,0);")
        else:
            self.status_label.setStyleSheet("color: red; background-color: rgba(0,0,0,0);")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = JarvisGUI()
    window.show()  # Use window.showFullScreen() for full screen
    sys.exit(app.exec_())
